const quoteButton=document.querySelector("#quote-button"),quoteModal=document.querySelector("#quote-modal"),closeQuoteModalButton=document.querySelector("#close-quote-modal-button"),moveLeftButton=document.querySelector("#move-left-button"),moveRightButton=document.querySelector("#move-right-button"),listBoard=document.querySelector("#list-board"),todoList=document.querySelector("#todo-list"),doingList=document.querySelector("#doing-list"),doneList=document.querySelector("#done-list"),newTaskButton=document.querySelector("#new-task-button"),taskModal=document.querySelector("#task-modal"),closeTaskModalButton=document.querySelector("#close-task-modal-button"),taskForm=document.querySelector("#task-form"),taskTitleInput=document.querySelector("#title"),taskDescriptionInput=document.querySelector("#description"),listIndicators=document.querySelector(".board-footer").children,tasks=JSON.parse(localStorage.getItem("tasks"))||[],toDo="to do",doing="doing",done="done";function createTask(t){const s=document.createElement("div"),e=`\n    <button class="expand active">\n      <span>Ler descrição</span>\n      <span aria-hidden="true" class="material-icons icon">expand_more</span>\n    </button>\n    <button class="expand highlighted">\n      <span>Esconder descrição</span>\n      <span aria-hidden="true" class="material-icons icon">expand_less</span>\n    </button>\n    <p class="description">${t.description}</p>`,a='\n      <button class="button back" aria-label="Retroceder tarefa">\n        <span aria-hidden="true" class="material-icons icon">navigate_before</span>\n      </button>',n='\n      <button class="button forward" aria-label="Avançar tarefa">\n        <span aria-hidden="true" class="material-icons icon">navigate_next</span>\n      </button>',i='\n      <button class="button restart" aria-label="Reiniciar tarefa">\n        <span aria-hidden="true" class="material-icons icon">replay</span>\n      </button>',o=`\n    <div class="header">\n      <h3 class="title">${t.title}</h3>\n      <button class="more-button" aria-label="Abrir menu da tarefa">\n        <span aria-hidden="true" class="material-icons icon">more_vert</span>\n      </button>\n      <div class="menu">\n        <button class="option-button edit-button">\n          <span aria-hidden="true" class="material-icons icon">edit</span>\n          <span>Editar</span>\n        </button>\n        <button class="option-button delete-button">\n          <span aria-hidden="true" class="material-icons icon">delete_outline</span>\n          <span>Excluir</span>\n        </button>\n      </div>\n    </div>\n    <div class="body">\n      <div class="task-info">\n        ${""===t.description?"":e}\n      </div>\n      <div class="task-move">\n        ${t.status===toDo?n:t.status===doing?a+n:a+i}\n      </div>\n    </div>`;return s.setAttribute("id",t.id),s.setAttribute("class","task"),s.insertAdjacentHTML("afterbegin",o),s}function updateListBoard(){tasks.map((t=>{const s=createTask(t);switch(t.status){case toDo:todoList.appendChild(s);break;case doing:doingList.appendChild(s);break;case done:doneList.appendChild(s);break;default:console.error("task "+t.title+" was not handled")}}))}function saveTask(t){if(t.preventDefault(),"add"===taskForm.lastElementChild.name){const t={id:`task-${crypto.randomUUID()}`,title:taskTitleInput.value,description:taskDescriptionInput.value,status:toDo};tasks.push(t),localStorage.setItem("tasks",JSON.stringify(tasks));const s=createTask(t);todoList.appendChild(s)}else{const t=tasks.findIndex((t=>t.id===taskForm.lastElementChild.value));tasks[t].title=taskTitleInput.value,tasks[t].description=taskDescriptionInput.value,localStorage.setItem("tasks",JSON.stringify(tasks));const s=createTask(tasks[t]);listBoard.querySelector(`#${tasks[t].id}`).replaceWith(s)}taskForm.reset(),taskModal.classList.remove("modal-active")}function moveTaskBack(t){const s=tasks.findIndex((s=>s.id===t));let e=null;switch(document.querySelector("#"+t).remove(),tasks[s].status){case done:tasks[s].status=doing,e=createTask(tasks[s]),doingList.appendChild(e);break;case doing:tasks[s].status=toDo,e=createTask(tasks[s]),todoList.appendChild(e);break;default:console.error("Task "+tasks[s].title+" was not handled")}localStorage.setItem("tasks",JSON.stringify(tasks))}function moveTaskForward(t){const s=tasks.findIndex((s=>s.id===t));let e=null;switch(document.querySelector("#"+t).remove(),tasks[s].status){case toDo:tasks[s].status=doing,e=createTask(tasks[s]),doingList.appendChild(e);break;case doing:tasks[s].status=done,e=createTask(tasks[s]),doneList.appendChild(e);break;case done:tasks[s].status=toDo,e=createTask(tasks[s]),todoList.appendChild(e);break;default:console.error("Task "+tasks[s].title+" was not handled")}localStorage.setItem("tasks",JSON.stringify(tasks))}function editTask(t){const s=tasks.findIndex((s=>s.id===t));taskForm.lastElementChild.name="edit",taskForm.lastElementChild.value=t,taskTitleInput.value=tasks[s].title,taskDescriptionInput.value=tasks[s].description,taskModal.firstElementChild.classList.add("editing"),taskModal.classList.add("modal-active")}function deleteTask(t){const s=tasks.findIndex((s=>s.id===t));tasks.splice(s,1),localStorage.setItem("tasks",JSON.stringify(tasks)),document.querySelector("#"+t).remove()}localStorage.getItem("tasks")&&updateListBoard(),quoteButton.addEventListener("click",(()=>{quoteModal.classList.add("modal-active")})),closeQuoteModalButton.addEventListener("click",(()=>{quoteModal.classList.remove("modal-active")})),moveLeftButton.addEventListener("click",(()=>{for(const t of listIndicators)t.classList.remove("active");listBoard.classList.contains("end")?(listBoard.classList.remove("end"),listBoard.classList.add("center"),listIndicators[1].classList.add("active")):listBoard.classList.contains("center")&&(listBoard.classList.remove("center"),listBoard.classList.add("start"),listIndicators[0].classList.add("active"))})),moveRightButton.addEventListener("click",(()=>{for(const t of listIndicators)t.classList.remove("active");listBoard.classList.contains("start")?(listBoard.classList.remove("start"),listBoard.classList.add("center"),listIndicators[1].classList.add("active")):listBoard.classList.contains("center")&&(listBoard.classList.remove("center"),listBoard.classList.add("end"),listIndicators[2].classList.add("active"))})),newTaskButton.addEventListener("click",(()=>{taskForm.lastElementChild.name="add",taskModal.classList.add("modal-active")})),closeTaskModalButton.addEventListener("click",(()=>{taskForm.reset(),taskModal.firstElementChild.classList.remove("editing"),taskModal.classList.remove("modal-active")})),taskForm.addEventListener("submit",saveTask),listBoard.addEventListener("click",(t=>{if(t.target.classList.contains("back")||t.target.parentElement.classList.contains("back")){moveTaskBack(t.target.closest(".task").id)}else if(t.target.classList.contains("forward")||t.target.parentElement.classList.contains("forward")||t.target.classList.contains("restart")||t.target.parentElement.classList.contains("restart")){moveTaskForward(t.target.closest(".task").id)}else if(t.target.classList.contains("expand")||t.target.parentElement.classList.contains("expand")){const s=t.target.closest(".task").id,e=listBoard.querySelector(`#${s} .task-info`).children;for(const t of e)t.classList.toggle("active")}else if(t.target.classList.contains("more-button")||t.target.parentElement.classList.contains("more-button")){const s=t.target.closest(".task").id;listBoard.querySelector(`#${s} .menu`).classList.toggle("active")}else if(t.target.classList.contains("edit-button")||t.target.parentElement.classList.contains("edit-button")){const s=t.target.closest(".task").id;listBoard.querySelector(`#${s} .menu`).classList.remove("active"),editTask(s)}else if(t.target.classList.contains("delete-button")||t.target.parentElement.classList.contains("delete-button")){const s=t.target.closest(".task").id;listBoard.querySelector(`#${s} .menu`).classList.remove("active"),deleteTask(s)}})),listIndicators[0].addEventListener("click",(()=>{listBoard.classList.remove("center","end"),listBoard.classList.add("start"),listIndicators[1].classList.remove("active"),listIndicators[2].classList.remove("active"),listIndicators[0].classList.add("active")})),listIndicators[1].addEventListener("click",(()=>{listBoard.classList.remove("start","end"),listBoard.classList.add("center"),listIndicators[0].classList.remove("active"),listIndicators[2].classList.remove("active"),listIndicators[1].classList.add("active")})),listIndicators[2].addEventListener("click",(()=>{listBoard.classList.remove("start","center"),listBoard.classList.add("end"),listIndicators[0].classList.remove("active"),listIndicators[1].classList.remove("active"),listIndicators[2].classList.add("active")}));